// Vercel Serverless Function to generate images.

interface VercelRequest { method?: string; body: any; }
interface VercelResponse { status: (code: number) => { json: (data: any) => void; }; }

import { GoogleGenAI } from "@google/genai";

export default async function handler(req: VercelRequest, res: VercelResponse) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    if (!process.env.API_KEY) {
        return res.status(500).json({ error: "API_KEY environment variable not set" });
    }
    
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

    try {
        const { prompt } = req.body;
        if (!prompt) {
            return res.status(400).json({ error: 'Missing required parameter: prompt' });
        }

        const fullPrompt = `A cinematic, hyperrealistic 4K still from a 3D animated film. ${prompt}`;

        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: fullPrompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/jpeg',
              aspectRatio: '16:9',
            },
        });

        if (!response.generatedImages || response.generatedImages.length === 0) {
            throw new Error("No image was generated by the API.");
        }

        const base64ImageBytes = response.generatedImages[0].image.imageBytes;
        const result = {
            dataUrl: `data:image/jpeg;base64,${base64ImageBytes}`,
            base64: base64ImageBytes
        };
        
        res.status(200).json(result);

    } catch (error) {
        console.error("Error in /api/image:", error);
        res.status(500).json({ error: "Failed to generate image from Gemini API." });
    }
}
